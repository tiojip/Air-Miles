knitr::opts_chunk$set(echo = TRUE)
# Charger le package data.table
install.packages("data.table")
library(data.table)
dt_merged <- fread("dt_merged.csv")
# Afficher un aperçu de la table fusionnée
head(dt_merged)
# Installer le package dplyr (à faire une seule fois)
install.packages("dplyr")
# Charger le package
library(dplyr)
dt_merged <- dt_merged %>%
mutate(IS_SPENDING = ifelse(AMOUNT_SPENT > 0, 1, 0)) %>%
group_by(MEMBER_ID) %>%
mutate(AVG_SPENDING_VALUE = ifelse(IS_SPENDING == 1 & TRANSACTIONS > 0, AMOUNT_SPENT / TRANSACTIONS, 0)) %>%
ungroup()
# Ajouter un ratio de rédemption des points spécifique à chaque catégorie de récompense
dt_merged <- dt_merged %>%
group_by(MEMBER_ID, REWARDS_CATEGORY) %>%  # Segmentation par catégorie
mutate(REDEMPTION_RATIO_CATEGORY = ifelse(TRANSACTIONS > 0,
(REDEMPTIONS / TRANSACTIONS) * 100, 0)) %>%
ungroup()
# Création des nouvelles variables dans dt_merged
dt_merged <- dt_merged %>%
# Pourcentage de points bonus gagnés par rapport aux points de base
mutate(PERCENTAGE_BONUS_POINTS = ifelse(BASE_POINTS_EARNED > 0,
(BONUS_POINTS_EARNED / BASE_POINTS_EARNED) * 100, 0)) %>%
# Pourcentage des points récompenses utilisés par rapport au solde de points disponibles
mutate(PERCENTAGE_REWARD_POINTS_USED = ifelse(REWARD_POINTS_BALANCE > 0,
(POINTS_REDEEMED / REWARD_POINTS_BALANCE) * 100, 0)) %>%
# Ratio d'utilisation du cashback
mutate(CASH_BACK_USAGE_RATIO = ifelse(CASH_BACK_POINTS_BALANCE > 0,
(CASH_BACK_POINTS_EARNED / CASH_BACK_POINTS_BALANCE) * 100, 0))
# Création des nouvelles variables par détaillant
dt_merged <- dt_merged %>%
# Montant total dépensé par membre et détaillant
group_by(MEMBER_ID, RETAILER) %>%
mutate(TOTAL_SPENT_PER_RETAILER = sum(AMOUNT_SPENT, na.rm = TRUE)) %>%
# Nombre de transactions par détaillant
mutate(TRANSACTION_COUNT_PER_RETAILER = n()) %>%
# Valeur moyenne par transaction chez un détaillant
mutate(AVG_TRANSACTION_VALUE_PER_RETAILER = TOTAL_SPENT_PER_RETAILER / TRANSACTION_COUNT_PER_RETAILER) %>%
# Pourcentage des dépenses chez un détaillant donné
mutate(PERCENTAGE_SPENT_PER_RETAILER = (TOTAL_SPENT_PER_RETAILER / sum(AMOUNT_SPENT, na.rm = TRUE)) * 100) %>%
# Ratio des rédemptions des points par détaillant
mutate(REDEMPTION_RATIO_PER_RETAILER = ifelse(TRANSACTION_COUNT_PER_RETAILER > 0,
(REDEMPTIONS / TRANSACTION_COUNT_PER_RETAILER) * 100, 0)) %>%
ungroup()
# Compter les valeurs manquantes par variable
missing_values <- dt_merged %>%
summarise(across(everything(), ~ sum(is.na(.)))) %>%
t() %>%
as.data.frame()
# Renommer les colonnes
colnames(missing_values) <- c("Nombre_Valeurs_Manquantes")
# Ajouter une colonne avec le pourcentage de valeurs manquantes
missing_values$Pourcentage <- (missing_values$Nombre_Valeurs_Manquantes / nrow(dt_merged)) * 100
# Trier par nombre de valeurs manquantes (descendant)
missing_values <- missing_values %>%
arrange(desc(Nombre_Valeurs_Manquantes))
# Afficher les résultats
print(missing_values)
dt_merged <- dt_merged %>%
group_by(MEMBER_ID, RETAILER) %>%
mutate(PERCENTAGE_SPENT_PER_RETAILER = ifelse(is.na(TOTAL_SPENT_PER_RETAILER), 0,
(TOTAL_SPENT_PER_RETAILER / sum(TOTAL_SPENT_PER_RETAILER, na.rm = TRUE)) * 100)) %>%
ungroup()
View(dt_merged)
knitr::opts_chunk$set(echo = TRUE)
# Compter les valeurs manquantes par variable
missing_values <- dt_merged %>%
summarise(across(everything(), ~ sum(is.na(.)))) %>%
t() %>%
as.data.frame()
# Afficher un aperçu de la table fusionnée
head(dt_merged)
# Compter les valeurs manquantes par variable
missing_values <- dt_merged %>%
summarise(across(everything(), ~ sum(is.na(.)))) %>%
t() %>%
as.data.frame()
# Installer le package dplyr (à faire une seule fois)
install.packages("dplyr")
# Charger le package
library(dplyr)
# Compter les valeurs manquantes par variable
missing_values <- dt_merged %>%
summarise(across(everything(), ~ sum(is.na(.)))) %>%
t() %>%
as.data.frame()
# Renommer les colonnes
colnames(missing_values) <- c("Nombre_Valeurs_Manquantes")
# Ajouter une colonne avec le pourcentage de valeurs manquantes
missing_values$Pourcentage <- (missing_values$Nombre_Valeurs_Manquantes / nrow(dt_merged)) * 100
# Trier par nombre de valeurs manquantes (descendant)
missing_values <- missing_values %>%
arrange(desc(Nombre_Valeurs_Manquantes))
# Afficher les résultats
print(missing_values)
dt_merged <- dt_merged %>%
group_by(MEMBER_ID, RETAILER) %>%
mutate(PERCENTAGE_SPENT_PER_RETAILER = ifelse(is.na(TOTAL_SPENT_PER_RETAILER), 0,
(TOTAL_SPENT_PER_RETAILER / sum(TOTAL_SPENT_PER_RETAILER, na.rm = TRUE)) * 100)) %>%
ungroup()
# Compter les valeurs manquantes par variable
missing_values <- dt_merged %>%
summarise(across(everything(), ~ sum(is.na(.)))) %>%
t() %>%
as.data.frame()
# Renommer les colonnes
colnames(missing_values) <- c("Nombre_Valeurs_Manquantes")
# Ajouter une colonne avec le pourcentage de valeurs manquantes
missing_values$Pourcentage <- (missing_values$Nombre_Valeurs_Manquantes / nrow(dt_merged)) * 100
# Trier par nombre de valeurs manquantes (descendant)
missing_values <- missing_values %>%
arrange(desc(Nombre_Valeurs_Manquantes))
# Afficher les résultats
print(missing_values)
dt_merged <- dt_merged %>%
group_by(MEMBER_ID, RETAILER) %>%
mutate(PERCENTAGE_SPENT_PER_RETAILER = ifelse(is.na(TOTAL_SPENT_PER_RETAILER), 0,
(TOTAL_SPENT_PER_RETAILER / sum(TOTAL_SPENT_PER_RETAILER, na.rm = TRUE)) * 100)) %>%
ungroup()
# Compter les valeurs manquantes par variable
missing_values <- dt_merged %>%
summarise(across(everything(), ~ sum(is.na(.)))) %>%
t() %>%
as.data.frame()
# Renommer les colonnes
colnames(missing_values) <- c("Nombre_Valeurs_Manquantes")
# Ajouter une colonne avec le pourcentage de valeurs manquantes
missing_values$Pourcentage <- (missing_values$Nombre_Valeurs_Manquantes / nrow(dt_merged)) * 100
# Trier par nombre de valeurs manquantes (descendant)
missing_values <- missing_values %>%
arrange(desc(Nombre_Valeurs_Manquantes))
# Afficher les résultats
print(missing_values)
# Charger le package data.table
install.packages("data.table")
library(data.table)
dt_merged <- fread("dt_merged.csv")
knitr::opts_chunk$set(echo = TRUE)
# Charger le package data.table
install.packages("data.table")
library(data.table)
dt_merged <- fread("dt_merged.csv")
View(dt_merged)
# Charger le package data.table
install.packages("data.table")
library(data.table)
dt_merged <- fread("dt_merged.csv")
# Installer le package dplyr (à faire une seule fois)
install.packages("dplyr")
# Charger le package
library(dplyr)
# Compter les valeurs manquantes par variable
missing_values <- dt_merged %>%
summarise(across(everything(), ~ sum(is.na(.)))) %>%
t() %>%
as.data.frame()
# Renommer les colonnes
colnames(missing_values) <- c("Nombre_Valeurs_Manquantes")
# Ajouter une colonne avec le pourcentage de valeurs manquantes
missing_values$Pourcentage <- (missing_values$Nombre_Valeurs_Manquantes / nrow(dt_merged)) * 100
# Trier par nombre de valeurs manquantes (descendant)
missing_values <- missing_values %>%
arrange(desc(Nombre_Valeurs_Manquantes))
# Afficher les résultats
print(missing_values)
library(dplyr)
# Remplacer les valeurs NA par 0
dt_merged <- dt_merged %>%
mutate(PERCENTAGE_SPENT_PER_RETAILER = ifelse(is.na(PERCENTAGE_SPENT_PER_RETAILER), 0, PERCENTAGE_SPENT_PER_RETAILER))
# Remplacer les valeurs NA par 0
dt_merged <- dt_merged %>%
mutate(PERCENTAGE_SPENT_PER_RETAILER = ifelse(is.na(PERCENTAGE_SPENT_PER_RETAILER), 0, PERCENTAGE_SPENT_PER_RETAILER))
rm(list = ls())  # Supprime tous les objets en mémoire
gc()  # Demande au système de récupérer la mémoire inutilisée
# Charger le package data.table
install.packages("data.table")
library(data.table)
knitr::opts_chunk$set(echo = TRUE)
# Charger le package data.table
install.packages("data.table")
library(data.table)
knitr::opts_chunk$set(echo = TRUE)
# Charger le package data.table
install.packages("data.table")
library(data.table)
dt_merged <- fread("dt_merged.csv")
# Installer le package dplyr (à faire une seule fois)
install.packages("dplyr")
# Charger le package
library(dplyr)
dt_merged <- dt_merged %>%
mutate(IS_SPENDING = ifelse(AMOUNT_SPENT > 0, 1, 0)) %>%
group_by(MEMBER_ID) %>%
mutate(AVG_SPENDING_VALUE = ifelse(IS_SPENDING == 1 & TRANSACTIONS > 0, AMOUNT_SPENT / TRANSACTIONS, 0)) %>%
ungroup()
# Ajouter un ratio de rédemption des points spécifique à chaque catégorie de récompense
dt_merged <- dt_merged %>%
group_by(MEMBER_ID, REWARDS_CATEGORY) %>%  # Segmentation par catégorie
mutate(REDEMPTION_RATIO_CATEGORY = ifelse(TRANSACTIONS > 0,
(REDEMPTIONS / TRANSACTIONS) * 100, 0)) %>%
ungroup()
# Création des nouvelles variables dans dt_merged
dt_merged <- dt_merged %>%
# Pourcentage de points bonus gagnés par rapport aux points de base
mutate(PERCENTAGE_BONUS_POINTS = ifelse(BASE_POINTS_EARNED > 0,
(BONUS_POINTS_EARNED / BASE_POINTS_EARNED) * 100, 0)) %>%
# Pourcentage des points récompenses utilisés par rapport au solde de points disponibles
mutate(PERCENTAGE_REWARD_POINTS_USED = ifelse(REWARD_POINTS_BALANCE > 0,
(POINTS_REDEEMED / REWARD_POINTS_BALANCE) * 100, 0)) %>%
# Ratio d'utilisation du cashback
mutate(CASH_BACK_USAGE_RATIO = ifelse(CASH_BACK_POINTS_BALANCE > 0,
(CASH_BACK_POINTS_EARNED / CASH_BACK_POINTS_BALANCE) * 100, 0))
dt_merged <- dt_merged %>%
group_by(MEMBER_ID, RETAILER) %>%
mutate(PERCENTAGE_SPENT_PER_RETAILER = ifelse(is.na(TOTAL_SPENT_PER_RETAILER), 0,
(TOTAL_SPENT_PER_RETAILER / sum(TOTAL_SPENT_PER_RETAILER, na.rm = TRUE)) * 100)) %>%
ungroup()
# Création des nouvelles variables par détaillant
dt_merged <- dt_merged %>%
# Montant total dépensé par membre et détaillant
group_by(MEMBER_ID, RETAILER) %>%
mutate(TOTAL_SPENT_PER_RETAILER = sum(AMOUNT_SPENT, na.rm = TRUE)) %>%
# Nombre de transactions par détaillant
mutate(TRANSACTION_COUNT_PER_RETAILER = n()) %>%
# Valeur moyenne par transaction chez un détaillant
mutate(AVG_TRANSACTION_VALUE_PER_RETAILER = TOTAL_SPENT_PER_RETAILER / TRANSACTION_COUNT_PER_RETAILER) %>%
# Ratio des rédemptions des points par détaillant
mutate(REDEMPTION_RATIO_PER_RETAILER = ifelse(TRANSACTION_COUNT_PER_RETAILER > 0,
(REDEMPTIONS / TRANSACTION_COUNT_PER_RETAILER) * 100, 0)) %>%
ungroup()
# Compter les valeurs manquantes par variable
missing_values <- dt_merged %>%
summarise(across(everything(), ~ sum(is.na(.)))) %>%
t() %>%
as.data.frame()
# Renommer les colonnes
colnames(missing_values) <- c("Nombre_Valeurs_Manquantes")
# Ajouter une colonne avec le pourcentage de valeurs manquantes
missing_values$Pourcentage <- (missing_values$Nombre_Valeurs_Manquantes / nrow(dt_merged)) * 100
# Trier par nombre de valeurs manquantes (descendant)
missing_values <- missing_values %>%
arrange(desc(Nombre_Valeurs_Manquantes))
# Afficher les résultats
print(missing_values)
dt_merged <- dt_merged %>%
group_by(MEMBER_ID, RETAILER) %>%
mutate(PERCENTAGE_SPENT_PER_RETAILER = ifelse(is.na(TOTAL_SPENT_PER_RETAILER), 0,
(TOTAL_SPENT_PER_RETAILER / sum(TOTAL_SPENT_PER_RETAILER, na.rm = TRUE)) * 100)) %>%
ungroup()
# Compter les valeurs manquantes par variable
missing_values <- dt_merged %>%
summarise(across(everything(), ~ sum(is.na(.)))) %>%
t() %>%
as.data.frame()
# Renommer les colonnes
colnames(missing_values) <- c("Nombre_Valeurs_Manquantes")
# Ajouter une colonne avec le pourcentage de valeurs manquantes
missing_values$Pourcentage <- (missing_values$Nombre_Valeurs_Manquantes / nrow(dt_merged)) * 100
# Trier par nombre de valeurs manquantes (descendant)
missing_values <- missing_values %>%
arrange(desc(Nombre_Valeurs_Manquantes))
# Afficher les résultats
print(missing_values)
dt_merged <- dt_merged %>%
mutate(PERCENTAGE_SPENT_PER_RETAILER = ifelse(is.na(PERCENTAGE_SPENT_PER_RETAILER) & TRANSACTIONS > 0,
0, PERCENTAGE_SPENT_PER_RETAILER))
# Compter les valeurs manquantes par variable
missing_values <- dt_merged %>%
summarise(across(everything(), ~ sum(is.na(.)))) %>%
t() %>%
as.data.frame()
# Renommer les colonnes
colnames(missing_values) <- c("Nombre_Valeurs_Manquantes")
# Ajouter une colonne avec le pourcentage de valeurs manquantes
missing_values$Pourcentage <- (missing_values$Nombre_Valeurs_Manquantes / nrow(dt_merged)) * 100
# Trier par nombre de valeurs manquantes (descendant)
missing_values <- missing_values %>%
arrange(desc(Nombre_Valeurs_Manquantes))
# Afficher les résultats
print(missing_values)
sum(is.na(dt_merged$TOTAL_SPENT_PER_RETAILER))  # Vérifier le nombre de NA
dt_merged %>%
group_by(MEMBER_ID) %>%
summarise(total_spent = sum(TOTAL_SPENT_PER_RETAILER, na.rm = TRUE)) %>%
filter(total_spent == 0)  # Voir combien de clients ont une somme totale de dépenses = 0
dt_merged <- dt_merged %>%
group_by(MEMBER_ID, RETAILER) %>%
mutate(PERCENTAGE_SPENT_PER_RETAILER = ifelse(sum(TOTAL_SPENT_PER_RETAILER, na.rm = TRUE) == 0,
0,  # Met 0 au lieu de NA
(TOTAL_SPENT_PER_RETAILER / sum(TOTAL_SPENT_PER_RETAILER, na.rm = TRUE)) * 100)) %>%
ungroup()
# Compter les valeurs manquantes par variable
missing_values <- dt_merged %>%
summarise(across(everything(), ~ sum(is.na(.)))) %>%
t() %>%
as.data.frame()
# Renommer les colonnes
colnames(missing_values) <- c("Nombre_Valeurs_Manquantes")
# Ajouter une colonne avec le pourcentage de valeurs manquantes
missing_values$Pourcentage <- (missing_values$Nombre_Valeurs_Manquantes / nrow(dt_merged)) * 100
# Trier par nombre de valeurs manquantes (descendant)
missing_values <- missing_values %>%
arrange(desc(Nombre_Valeurs_Manquantes))
# Afficher les résultats
print(missing_values)
# Sélectionner uniquement les variables numériques et exclure les ID et variables qualitatives
dt_pca <- dt_merged %>%
select_if(is.numeric)  # Garde uniquement les colonnes numériques
# Vérifier les résultats après standardisation
summary(dt_pca)
# Standardisation des données (centrage-réduction)
dt_pca_scaled <- scale(dt_pca)
# Supprimer uniquement la table missing_values de la mémoire
rm(missing_values)
# Libérer la mémoire inutilisée
gc()
# Standardisation des données (centrage-réduction)
dt_pca_scaled <- scale(dt_pca)
# Exporter le dataframe en fichier CSV
write.csv(dt_pca, "dt_pca_export.csv", row.names = FALSE)
# Sélectionner uniquement les variables numériques et exclure MEMBER_ID, RETAILER, REWARDS_CATEGORY
dt_pca <- dt_merged %>%
select(-c(MEMBER_ID, RETAILER, REWARDS_CATEGORY)) %>%  # Exclure les variables qualitatives
select_if(is.numeric)  # Ne garder que les variables numériques
class(dt_merged$RETAILER)  # Vérifie si c'est un facteur ou un caractère
unique(dt_merged$RETAILER)
length(unique(dt_merged$RETAILER))
str(dt_merged)
# Nombre de classes uniques par variable
length(unique(dt_merged$RETAILER))  # Nombre de détaillants uniques
length(unique(dt_merged$REWARDS_CATEGORY))  # Nombre de catégories de récompenses uniques
# Nombre de classes uniques par variable
length(unique(dt_merged$RETAILER))  # Nombre de détaillants uniques
length(unique(dt_merged$REWARDS_CATEGORY))  # Nombre de catégories de récompenses uniques
# Charger les packages nécessaires
library(caret)
install.packages("caret", dependencies = TRUE)
# Charger les packages nécessaires
library(caret)
library(dplyr)
# Sélectionner les variables pertinentes (exclure MEMBER_ID pour l’ACP)
dt_pca <- dt_merged %>%
select(-MEMBER_ID)
# Appliquer le One-Hot Encoding sur RETAILER et REWARDS_CATEGORY
one_hot <- dummyVars("~ RETAILER + REWARDS_CATEGORY", data = dt_pca)
# Convertir en dataframe après encodage
dt_pca_encoded <- predict(one_hot, dt_pca) %>% as.data.frame()
# Sélectionner les variables pertinentes (exclure MEMBER_ID pour l’ACP)
dt_pca <- dt_merged %>%
select(-MEMBER_ID)
# Sélectionner les variables pertinentes (exclure MEMBER_ID pour l’ACP)
dt_pca <- dt_merged %>%
select(-MEMBER_ID)
# Appliquer le One-Hot Encoding sur RETAILER et REWARDS_CATEGORY
one_hot <- dummyVars("~ RETAILER + REWARDS_CATEGORY", data = dt_pca)
# Convertir en dataframe après encodage
dt_pca_encoded <- predict(one_hot, dt_pca) %>% as.data.frame()
# Exporter dt_merged en fichier CSV
write.csv(dt_merged, "dt_merged_export.csv", row.names = FALSE)
# Exporter le dataframe en fichier CSV
write.csv(dt_pca, "dt_pca_exp.csv", row.names = FALSE)
rm(list = ls())  # Supprime tous les objets en mémoire
gc()  # Demande au système de récupérer la mémoire inutilisée
# Charger le package data.table
install.packages("data.table")
library(data.table)
